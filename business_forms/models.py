import os
import re

from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import SuspiciousFileOperation
from django.db import models
from django.utils.html import format_html
from business_forms.utils import format_phone_number


def safe_filename(filename):
    filename = re.sub(r'[^\w\s.-]', '', filename).strip()
    if '..' in filename or filename.startswith('/'):
        raise SuspiciousFileOperation("Detected path traversal attempt")
    return filename


class BusinessForm(models.Model):
    def get_upload_photo_path(self, filename):
        filename = safe_filename(filename)
        return os.path.join('banners', filename)

    def get_upload_spasibo_path(self, filename):
        filename = safe_filename(filename)
        return os.path.join('spasibo', filename)

    name = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255, unique=True)
    photo = models.ImageField(upload_to=get_upload_photo_path)
    spasibo_photo = models.ImageField(upload_to=get_upload_spasibo_path)

    content_type = models.ForeignKey(ContentType, on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º"
        verbose_name_plural = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º"


class BaseModelForm:

    @property
    def instagram_link(self):
        return f"https://instagram.com/{self.instagram_username}"

    @property
    def tg_username_link(self):
        tg_username = self.tg_username.replace("@", '')
        return f"https://t.me/{tg_username}"

    @property
    def tg_phone_link(self):
        return f"https://t.me/{format_phone_number(self.phone)}"

    def formatted_instagram_link(self):
        return format_html("<a href=\"{}\" target=\"_blank\">{}</a>", self.instagram_link, '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Instagram')

    def formatted_tg_username_link(self):
        return format_html("<a href=\"{}\" target=\"_blank\">{}</a>", self.tg_username_link, '–ù–∞–ø–∏—Å–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É')

    def formatted_tg_phone_link(self):
        return format_html("<a href=\"{}\" target=\"_blank\">{}</a>", self.tg_phone_link, '–ù–∞–ø–∏—Å–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É')

    formatted_instagram_link.short_description = '–°—Å—ã–ª–∫–∞ –Ω–∞ instagram'
    formatted_tg_username_link.short_description = '–°—Å—ã–ª–∫–∞ TG —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É'
    formatted_tg_phone_link.short_description = '–°—Å—ã–ª–∫–∞ TG —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'


class MedblogersPreEntry(models.Model, BaseModelForm):
    PRE_ENTRY_CHOICES = (
        (1, "–û—Ç–∫—Ä—ã—Ç"),
        (2, "–í –∫–ª—É–±–µ"),
        (3, "–°–≤—è–∑–∞–ª–∞—Å—å, –∂–¥—É –æ—Ç–≤–µ—Ç"),
        (4, "–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"),
        (5, "–ó–∞–π–¥–µ—Ç –ø–æ–∑–∂–µ")
    )

    timestamp = models.DateTimeField(auto_now_add=True, verbose_name="–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", null=True, blank=True)
    name = models.CharField(
        max_length=255, verbose_name="–§–ò",
        null=True, blank=True
    )
    email = models.EmailField(
        verbose_name="–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã",
    )
    phone = models.CharField(
        max_length=20, verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        null=True, blank=True
    )

    tg_username = models.CharField(
        max_length=255, verbose_name="–í–∞—à Telegram (–Ω–µ –∫–∞–Ω–∞–ª, –∞ –ª–∏—á–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º, —á–µ—Ä–µ–∑ @)",
        null=True, blank=True
    )

    instagram_username = models.CharField(
        max_length=255, verbose_name="–í–∞—à Instagram",
        null=True, blank=True
    )

    policy_agreement = models.BooleanField(
        verbose_name="–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        default=False
    )

    status = models.IntegerField(choices=PRE_ENTRY_CHOICES, default=1, verbose_name="–°—Ç–∞—Ç—É—Å")

    description = models.TextField(verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞", null=True, blank=True)

    def colored_status(self):
        color = 'black'
        background_color = 'white'
        if self.status == 2:
            color = 'white'
            background_color = '#4dab4d'
        elif self.status == 3:
            color = 'white'
            background_color = '#ff9c00'
        elif self.status == 4:
            color = 'white'
            background_color = '#ff0000'
        elif self.status == 5:
            color = 'white'
            background_color = 'black'
        return format_html(
            '<span style="background-color: {}; color: {}; border: 1px solid black; position:relative; display: '
            'block; padding: 5px; text-align: center;'
            'margin: -5px; border-radius: 8px;">{}</span>', background_color, color,
            self.get_status_display()
        )

    colored_status.short_description = '–°—Ç–∞—Ç—É—Å'

    def __str__(self):
        return f"–ê–Ω–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∫–ª—É–±–∞: {self.name}"

    class Meta:
        verbose_name = "–∑–∞–ø–∏—Å—å –≤ –∞–Ω–∫–µ—Ç–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏ –≤ –∫–ª—É–±"
        verbose_name_plural = "–ê–Ω–∫–µ—Ç–∞ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏ –≤ –∫–ª—É–±"


class NastavnichestvoPreEntry(models.Model):
    NASTAVNICHESTVO_CHOICES = (
        (1, "–û—Ç–∫—Ä—ã—Ç"),
        (2, "–í –∫–ª—É–±–µ"),
        (3, "–°–≤—è–∑–∞–ª–∞—Å—å, –∂–¥—É –æ—Ç–≤–µ—Ç"),
        (4, "–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"),
        (5, "–ó–∞–π–¥–µ—Ç –ø–æ–∑–∂–µ")
    )
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name="–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏")

    status = models.IntegerField(choices=NASTAVNICHESTVO_CHOICES, default=1, verbose_name="–°—Ç–∞—Ç—É—Å")

    name = models.CharField(
        max_length=255, verbose_name="–§–ò",
        null=True, blank=True
    )
    city = models.CharField(
        max_length=255, verbose_name="–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç",
        blank=True, null=True
    )
    speciality = models.CharField(
        max_length=255, verbose_name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–≥–∏–Ω–µ–∫–æ–ª–æ–≥, –Ω–µ–≤—Ä–æ–ª–æ–≥ –∏ —Ç.–¥.)",
        blank=True, null=True
    )
    instagram_username = models.CharField(
        max_length=255, verbose_name="–í–∞—à Instagram",
        null=True, blank=True
    )
    tg_username = models.CharField(
        max_length=255, verbose_name="–í–∞—à Telegram (–Ω–µ –∫–∞–Ω–∞–ª, –∞ –ª–∏—á–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º, —á–µ—Ä–µ–∑ @)",
        null=True, blank=True
    )
    target = models.TextField(
        verbose_name="–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤–µ–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞?",
        null=True, blank=True
    )
    opinion = models.TextField(
        verbose_name="–ö–∞–∫ –¥—É–º–∞–µ—Ç–µ, –ø–æ—á–µ–º—É –≤—Å—ë –µ—â—ë –∏—Ö –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏? –ß—Ç–æ –≤–∞—Å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç?",
        null=True, blank=True
    )
    results = models.TextField(
        verbose_name="–ö–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∏—Ç—å—Å—è –æ—Ç –º–æ–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞ –∑–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (1-2 –º–µ—Å—è—Ü–∞)?",
        null=True, blank=True
    )
    employment_level = models.IntegerField(
        verbose_name="–û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 10",
        null=True, blank=True
    )
    focus = models.TextField(
        verbose_name="–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞ –≤—Ä–µ–º—è –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞ –±–æ–ª—å—à–µ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–ª–æ–≥–µ, —á–µ–º —Ä–∞–Ω—å—à–µ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–ª–∞ (–ø–æ–º–∏–º–æ —Ä–∞–±–æ—Ç—ã, –µ—Å—Ç–µ—Å–Ω–∞)?",
        null=True, blank=True
    )
    questions = models.TextField(
        verbose_name="–ù–∞–≤–µ—Ä–Ω–æ–µ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –° —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–∏—Ö –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ)",
        null=True, blank=True
    )
    email = models.EmailField(
        verbose_name="–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã"
    )
    phone = models.CharField(
        max_length=20, verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        null=True, blank=True
    )
    price = models.TextField(
        verbose_name="–ò –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–æ—Ç –≤–∞—Å –∫–æ –º–Ω–µ) - —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç? –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –∞ —è –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ —Å–∫–∞–∂—É, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Ç–æ—á–Ω–æ –ø–æ–ø–∞–ª–∏))",
        null=True, blank=True
    )
    need_nmo = models.TextField(
        verbose_name="–í–∞–º –Ω—É–∂–Ω–æ 144 –±–∞–ª–ª–∞ –ù–ú–û, –∫–∞–∫ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ò–Ω—Å—Ç–∞–¢–µ—Ä–∞–ø–∏–∏? (—ç—Ç–æ –∑–∞ –¥–æ–ø.–ø–ª–∞—Ç—É) üòÅ",
        null=True, blank=True
    )

    @property
    def tg_link(self):
        if self.tg_username:
            tg_username = self.tg_username.replace('@', '')
            return f"https://t.me/{tg_username}"
        else:
            return f"https://t.me/{format_phone_number(self.phone)}"

    def colored_status(self):
        color = 'black'
        background_color = 'white'
        if self.status == 2:
            color = 'white'
            background_color = '#4dab4d'
        elif self.status == 3:
            color = 'white'
            background_color = '#ff9c00'
        elif self.status == 4:
            color = 'white'
            background_color = '#ff0000'
        elif self.status == 5:
            color = 'white'
            background_color = 'black'
        return format_html(
            '<span style="background-color: {}; color: {}; border: 1px solid black; position:relative; display: '
            'block; padding: 5px; text-align: center;'
            'margin: -5px; border-radius: 8px;">{}</span>', background_color, color,
            self.get_status_display()
        )

    colored_status.short_description = '–°—Ç–∞—Ç—É—Å'

    class Meta:
        verbose_name = "–∑–∞–ø–∏—Å—å –≤ –∞–Ω–∫–µ—Ç–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏ –Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ"
        verbose_name_plural = "–ê–Ω–∫–µ—Ç–∞ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏ –Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ"


class NationalBlogersAssociation(models.Model):
    NATIONAL_CHOICES = (
        (1, "–û—Ç–∫—Ä—ã—Ç"),
        (2, "–í –∫–ª—É–±–µ"),
        (3, "–°–≤—è–∑–∞–ª–∞—Å—å, –∂–¥—É –æ—Ç–≤–µ—Ç"),
        (4, "–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"),
        (5, "–ó–∞–π–¥–µ—Ç –ø–æ–∑–∂–µ")
    )
    status = models.IntegerField(choices=NATIONAL_CHOICES, default=1, verbose_name="–°—Ç–∞—Ç—É—Å")

    name = models.CharField(
        max_length=255, verbose_name="–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è", null=True, blank=True
    )
    birth_date = models.DateField(
        verbose_name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", null=True, blank=True
    )
    city = models.CharField(
        max_length=255, verbose_name="–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", null=True, blank=True
    )
    job = models.CharField(
        max_length=255, verbose_name="–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã, –¥–æ–ª–∂–Ω–æ—Å—Ç—å", null=True, blank=True
    )
    speciality = models.CharField(
        max_length=255, verbose_name="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", null=True, blank=True
    )
    phone_number = models.CharField(
        max_length=255, verbose_name="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", null=True, blank=True
    )
    email = models.EmailField(
        verbose_name="–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã", null=True, blank=True
    )
    blog_link = models.CharField(
        verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ / –±–ª–æ–≥", max_length=255, null=True, blank=True
    )
    expectations = models.TextField(
        verbose_name="–í–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –±–ª–æ–≥–µ—Ä–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", null=True,
        blank=True
    )
    policy_agreement = models.BooleanField(
        verbose_name="–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        default=False
    )

    def colored_status(self):
        color = 'black'
        background_color = 'white'
        if self.status == 2:
            color = 'white'
            background_color = '#4dab4d'
        elif self.status == 3:
            color = 'white'
            background_color = '#ff9c00'
        elif self.status == 4:
            color = 'white'
            background_color = '#ff0000'
        elif self.status == 5:
            color = 'white'
            background_color = 'black'
        return format_html(
            '<span style="background-color: {}; color: {}; border: 1px solid black; position:relative; display: '
            'block; padding: 5px; text-align: center;'
            'margin: -5px; border-radius: 8px;">{}</span>', background_color, color,
            self.get_status_display()
        )

    colored_status.short_description = '–°—Ç–∞—Ç—É—Å'

    class Meta:
        verbose_name = "–∑–∞–ø–∏—Å—å –≤ –∞–Ω–∫–µ—Ç–µ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –±–ª–æ–≥–µ—Ä–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
        verbose_name_plural = "–ê–Ω–∫–µ—Ç–∞ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –±–ª–æ–≥–µ—Ä–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
